<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="hello" class="com.yc.spring.Hello">   
    </bean>
   
    <bean id="mdao" class=" com.yc.spring.dao.MySQLUserDao">   
    </bean>
    
    <bean id="odao" class=" com.yc.spring.dao.OracleUserDao">   
    </bean>
    

	<!--
		 Spring 依赖注入（DI） 注入方式有三种
		 注入 对象属性初始化设置
		 1.setter 注入（set 方法注入）
		 	new 对象
		 	对象 setxxx
		 2.构造方法注入
		 3.接口注入 ==> SpringMVC大量的应用 
	 -->
	 
	 <!-- 注入的例子使用的是 实体对象， 实际开发中很少对实体对象设置 -->
	 <bean id="p1" class="com.yc.spring.bean.Person">
	 	<!-- property 实现setter注入 -->
	 	<property name="name" value="武松"></property>
	 	<property name="age" value="35"></property>
		<property name="killeds">
			<list>
				<value type="java.lang.String">潘金莲</value>
				<value >西门庆</value>
				<value type="java.lang.String">蒋门神</value>
				<value>null</value>
				<null></null>
			</list>
		</property>	
	</bean>
	
	  	<!-- primary="true" 设置当前的bean 是主要的， 默认class 方式获取的  -->	
	 <bean  class=" com.yc.spring.bean.Person" primary="true" >  
	 	<constructor-arg name="name" value="李逵" index="0" ></constructor-arg>
	 	<constructor-arg name="alias" value="黑旋风" index="2"></constructor-arg>
	 	<constructor-arg name="age" value="35" index="1" ></constructor-arg>
	 </bean>
	 
	 <bean id="p2" class="com.yc.spring.bean.Person">
	 	<!-- property 实现setter注入 -->
	 	<property name="name" value="吴用"></property>
	 	<property name="age" value="35"></property>
		<property name="friend" ref="p3">
			
		</property>	
	</bean>
	
	<bean id="p3" class="com.yc.spring.bean.Person" >
		<property name="name" value="花荣"></property>
	</bean>
	 
	 <!-- 工程方式创建对象 -->
	 <!-- 静态工产方法配置 -->
	 <bean id="p4" class="com.yc.spring.bean.Person" 
	 	factory-method="personFactory" >
		<property name="name" value="王英"></property>
	</bean>
	
	<!-- 实例工产方法配置 -->
	 <bean id="p6" class="com.yc.spring.bean.Person" 
	 	factory-method="personFactory1" factory-bean="personFactory">
		<property name="name" value="扈三娘"></property>
	</bean>
	 <bean id="personFactory" class="com.yc.spring.bean.Person" >
	</bean>
	
	<!--
		
	 -->
	<!--
		1.scope="singleton" 单例默认每次getBean 的时候， 都会使用同一个 bean  
		2.scope="prototype" 原型（多利）每次getBean 的时候，都会创建一个新的bean 
		会使用new or 工厂方法
		3.lazy-init:懒加载 默认为false ,Spring 容器在启动时就会创建所有的未配置懒加载的bean
		4.其他作用域：session request global
	-->
	
	 <bean id="hello1" class="com.yc.spring.Hello" scope="prototype">  
	 	<constructor-arg name="a" value="100"></constructor-arg> 
    </bean>
  
	
	<!--   3.lazy-init:懒加载 默认为false ,Spring 容器在启动时就会创建所有的未配置懒加载的bean -->
	<!-- prototype 原型模式下默认懒加载 -->
    <bean id="hello2" class="com.yc.spring.Hello" lazy-init="true">  
	 	<constructor-arg name="a" value="100"></constructor-arg> 
    </bean>
    
    
    <!-- 生命周期方法 init 初始化 destroy 销毁一些资源 -->
    <bean id="hello3" class="com.yc.spring.Hello"
    	init-method="init" destroy-method="destroy" >  
    </bean>
    
    
   <!-- autowire="default" 自动装载 ，根据一些规则自动的从Ioc 容器获取属性值
   		byName：用属性名从容器中获取指定的id的bean
   		byType: 用类名从容器中获取指定类型获取bean
   		constructor: 根据构造方法参数的类型获取bean
   		default ==>no不自动装载
    -->
    <bean id="friend" class="com.yc.spring.bean.Person">
    	<property name="name" value="鲁智深"></property>
    </bean>
    <bean id="p7" class="com.yc.spring.bean.Person" autowire="byName">
    	<property name="name" value="武松"></property>
    	<property name="age" value="35"></property>
    </bean>
	
</beans>
